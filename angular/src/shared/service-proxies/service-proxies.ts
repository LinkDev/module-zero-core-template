/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.12.6284.29969 (NJsonSchema v8.11.6284.26855) (http://NSwag.org)
// </auto-generated>
//----------------------

import * as moment from 'moment';

import 'rxjs/Rx'; 
import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { Http, Headers, Response } from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

@Injectable()
export class AccountServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    isTenantAvailable(input?: IsTenantAvailableInput): Observable<IsTenantAvailableOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantAvailable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processIsTenantAvailable(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processIsTenantAvailable(response));
                } catch (e) {
                    return <Observable<IsTenantAvailableOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<IsTenantAvailableOutput>><any>Observable.throw(response);
        });
    }

    protected processIsTenantAvailable(response: Response): IsTenantAvailableOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: IsTenantAvailableOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? IsTenantAvailableOutput.fromJS(resultData200) : new IsTenantAvailableOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    register(input?: RegisterInput): Observable<RegisterOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processRegister(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRegister(response));
                } catch (e) {
                    return <Observable<RegisterOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RegisterOutput>><any>Observable.throw(response);
        });
    }

    protected processRegister(response: Response): RegisterOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: RegisterOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterOutput.fromJS(resultData200) : new RegisterOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class ConfigurationServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    changeUiTheme(input?: ChangeUiThemeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Configuration/ChangeUiTheme";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processChangeUiTheme(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processChangeUiTheme(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processChangeUiTheme(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class DomainServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    get(id?: string): Observable<DomainDto> {
        let url_ = this.baseUrl + "/api/services/app/Domain/Get?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<DomainDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<DomainDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): DomainDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: DomainDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DomainDto.fromJS(resultData200) : new DomainDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAll(filter?: string, maxResultCount?: number, sorting?: string, skipCount?: number): Observable<PagedResultDtoOfDomainDto> {
        let url_ = this.baseUrl + "/api/services/app/Domain/GetAll?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfDomainDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfDomainDto>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): PagedResultDtoOfDomainDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfDomainDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfDomainDto.fromJS(resultData200) : new PagedResultDtoOfDomainDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    create(input?: DomainDto): Observable<DomainDto> {
        let url_ = this.baseUrl + "/api/services/app/Domain/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreate(response));
                } catch (e) {
                    return <Observable<DomainDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<DomainDto>><any>Observable.throw(response);
        });
    }

    protected processCreate(response: Response): DomainDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: DomainDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DomainDto.fromJS(resultData200) : new DomainDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    update(input?: DomainDto): Observable<DomainDto> {
        let url_ = this.baseUrl + "/api/services/app/Domain/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdate(response));
                } catch (e) {
                    return <Observable<DomainDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<DomainDto>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): DomainDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: DomainDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DomainDto.fromJS(resultData200) : new DomainDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    delete(id?: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Domain/Delete?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDelete(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class DomainGroupServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    get(id?: string): Observable<DomainGroupDto> {
        let url_ = this.baseUrl + "/api/services/app/DomainGroup/Get?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<DomainGroupDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<DomainGroupDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): DomainGroupDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: DomainGroupDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DomainGroupDto.fromJS(resultData200) : new DomainGroupDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAll(filter?: string, maxResultCount?: number, sorting?: string, skipCount?: number): Observable<PagedResultDtoOfDomainGroupDto> {
        let url_ = this.baseUrl + "/api/services/app/DomainGroup/GetAll?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfDomainGroupDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfDomainGroupDto>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): PagedResultDtoOfDomainGroupDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfDomainGroupDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfDomainGroupDto.fromJS(resultData200) : new PagedResultDtoOfDomainGroupDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    create(input?: DomainGroupDto): Observable<DomainGroupDto> {
        let url_ = this.baseUrl + "/api/services/app/DomainGroup/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreate(response));
                } catch (e) {
                    return <Observable<DomainGroupDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<DomainGroupDto>><any>Observable.throw(response);
        });
    }

    protected processCreate(response: Response): DomainGroupDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: DomainGroupDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DomainGroupDto.fromJS(resultData200) : new DomainGroupDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    update(input?: DomainGroupDto): Observable<DomainGroupDto> {
        let url_ = this.baseUrl + "/api/services/app/DomainGroup/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdate(response));
                } catch (e) {
                    return <Observable<DomainGroupDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<DomainGroupDto>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): DomainGroupDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: DomainGroupDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DomainGroupDto.fromJS(resultData200) : new DomainGroupDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    delete(id?: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/DomainGroup/Delete?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDelete(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class QuestionServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    get(id?: string): Observable<QuestionDto> {
        let url_ = this.baseUrl + "/api/services/app/Question/Get?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<QuestionDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<QuestionDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): QuestionDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QuestionDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QuestionDto.fromJS(resultData200) : new QuestionDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAll(filter?: string, maxResultCount?: number, sorting?: string, skipCount?: number): Observable<PagedResultDtoOfQuestionDto> {
        let url_ = this.baseUrl + "/api/services/app/Question/GetAll?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfQuestionDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfQuestionDto>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): PagedResultDtoOfQuestionDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfQuestionDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfQuestionDto.fromJS(resultData200) : new PagedResultDtoOfQuestionDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    create(input?: QuestionDto): Observable<QuestionDto> {
        let url_ = this.baseUrl + "/api/services/app/Question/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreate(response));
                } catch (e) {
                    return <Observable<QuestionDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<QuestionDto>><any>Observable.throw(response);
        });
    }

    protected processCreate(response: Response): QuestionDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QuestionDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QuestionDto.fromJS(resultData200) : new QuestionDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    update(input?: QuestionDto): Observable<QuestionDto> {
        let url_ = this.baseUrl + "/api/services/app/Question/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdate(response));
                } catch (e) {
                    return <Observable<QuestionDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<QuestionDto>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): QuestionDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QuestionDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QuestionDto.fromJS(resultData200) : new QuestionDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    delete(id?: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Question/Delete?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDelete(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class QuestionGroupServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    get(id?: string): Observable<QuestionGroupDto> {
        let url_ = this.baseUrl + "/api/services/app/QuestionGroup/Get?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<QuestionGroupDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<QuestionGroupDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): QuestionGroupDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QuestionGroupDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QuestionGroupDto.fromJS(resultData200) : new QuestionGroupDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAll(filter?: string, maxResultCount?: number, sorting?: string, skipCount?: number): Observable<PagedResultDtoOfQuestionGroupDto> {
        let url_ = this.baseUrl + "/api/services/app/QuestionGroup/GetAll?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfQuestionGroupDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfQuestionGroupDto>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): PagedResultDtoOfQuestionGroupDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfQuestionGroupDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfQuestionGroupDto.fromJS(resultData200) : new PagedResultDtoOfQuestionGroupDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    create(input?: QuestionGroupDto): Observable<QuestionGroupDto> {
        let url_ = this.baseUrl + "/api/services/app/QuestionGroup/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreate(response));
                } catch (e) {
                    return <Observable<QuestionGroupDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<QuestionGroupDto>><any>Observable.throw(response);
        });
    }

    protected processCreate(response: Response): QuestionGroupDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QuestionGroupDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QuestionGroupDto.fromJS(resultData200) : new QuestionGroupDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    update(input?: QuestionGroupDto): Observable<QuestionGroupDto> {
        let url_ = this.baseUrl + "/api/services/app/QuestionGroup/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdate(response));
                } catch (e) {
                    return <Observable<QuestionGroupDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<QuestionGroupDto>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): QuestionGroupDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QuestionGroupDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QuestionGroupDto.fromJS(resultData200) : new QuestionGroupDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    delete(id?: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/QuestionGroup/Delete?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDelete(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class RoleServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    create(input?: CreateRoleDto): Observable<RoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreate(response));
                } catch (e) {
                    return <Observable<RoleDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<RoleDto>><any>Observable.throw(response);
        });
    }

    protected processCreate(response: Response): RoleDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: RoleDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RoleDto.fromJS(resultData200) : new RoleDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    update(input?: RoleDto): Observable<RoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdate(response));
                } catch (e) {
                    return <Observable<RoleDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<RoleDto>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): RoleDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: RoleDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RoleDto.fromJS(resultData200) : new RoleDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    delete(id?: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/Delete?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDelete(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAllPermissions(): Observable<ListResultDtoOfPermissionDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetAllPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAllPermissions(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAllPermissions(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfPermissionDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfPermissionDto>><any>Observable.throw(response);
        });
    }

    protected processGetAllPermissions(response: Response): ListResultDtoOfPermissionDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfPermissionDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfPermissionDto.fromJS(resultData200) : new ListResultDtoOfPermissionDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    get(id?: number): Observable<RoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Get?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<RoleDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<RoleDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): RoleDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: RoleDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RoleDto.fromJS(resultData200) : new RoleDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAll(skipCount?: number, maxResultCount?: number): Observable<PagedResultDtoOfRoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetAll?";
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfRoleDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfRoleDto>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): PagedResultDtoOfRoleDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfRoleDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfRoleDto.fromJS(resultData200) : new PagedResultDtoOfRoleDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class SessionServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getCurrentLoginInformations(): Observable<GetCurrentLoginInformationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/GetCurrentLoginInformations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetCurrentLoginInformations(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetCurrentLoginInformations(response));
                } catch (e) {
                    return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(response);
        });
    }

    protected processGetCurrentLoginInformations(response: Response): GetCurrentLoginInformationsOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetCurrentLoginInformationsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrentLoginInformationsOutput.fromJS(resultData200) : new GetCurrentLoginInformationsOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class StudentServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getAllDeleted(filter?: string, maxResultCount?: number, sorting?: string, skipCount?: number): Observable<PagedResultDtoOfStudentDto> {
        let url_ = this.baseUrl + "/api/services/app/Student/GetAllDeleted?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAllDeleted(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAllDeleted(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfStudentDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfStudentDto>><any>Observable.throw(response);
        });
    }

    protected processGetAllDeleted(response: Response): PagedResultDtoOfStudentDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfStudentDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfStudentDto.fromJS(resultData200) : new PagedResultDtoOfStudentDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    restore(id?: number): Observable<StudentDto> {
        let url_ = this.baseUrl + "/api/services/app/Student/Restore?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processRestore(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRestore(response));
                } catch (e) {
                    return <Observable<StudentDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<StudentDto>><any>Observable.throw(response);
        });
    }

    protected processRestore(response: Response): StudentDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: StudentDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? StudentDto.fromJS(resultData200) : new StudentDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    get(id?: number): Observable<StudentDto> {
        let url_ = this.baseUrl + "/api/services/app/Student/Get?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<StudentDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<StudentDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): StudentDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: StudentDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? StudentDto.fromJS(resultData200) : new StudentDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAll(filter?: string, maxResultCount?: number, sorting?: string, skipCount?: number): Observable<PagedResultDtoOfStudentDto> {
        let url_ = this.baseUrl + "/api/services/app/Student/GetAll?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfStudentDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfStudentDto>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): PagedResultDtoOfStudentDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfStudentDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfStudentDto.fromJS(resultData200) : new PagedResultDtoOfStudentDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    create(input?: StudentDto): Observable<StudentDto> {
        let url_ = this.baseUrl + "/api/services/app/Student/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreate(response));
                } catch (e) {
                    return <Observable<StudentDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<StudentDto>><any>Observable.throw(response);
        });
    }

    protected processCreate(response: Response): StudentDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: StudentDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? StudentDto.fromJS(resultData200) : new StudentDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    update(input?: StudentDto): Observable<StudentDto> {
        let url_ = this.baseUrl + "/api/services/app/Student/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdate(response));
                } catch (e) {
                    return <Observable<StudentDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<StudentDto>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): StudentDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: StudentDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? StudentDto.fromJS(resultData200) : new StudentDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    delete(id?: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Student/Delete?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDelete(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class SurveyServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    get(id?: string): Observable<SurveyDto> {
        let url_ = this.baseUrl + "/api/services/app/Survey/Get?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<SurveyDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<SurveyDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): SurveyDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SurveyDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SurveyDto.fromJS(resultData200) : new SurveyDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAll(filter?: string, maxResultCount?: number, sorting?: string, skipCount?: number): Observable<PagedResultDtoOfSurveyDto> {
        let url_ = this.baseUrl + "/api/services/app/Survey/GetAll?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfSurveyDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfSurveyDto>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): PagedResultDtoOfSurveyDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfSurveyDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfSurveyDto.fromJS(resultData200) : new PagedResultDtoOfSurveyDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    create(input?: SurveyDto): Observable<SurveyDto> {
        let url_ = this.baseUrl + "/api/services/app/Survey/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreate(response));
                } catch (e) {
                    return <Observable<SurveyDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<SurveyDto>><any>Observable.throw(response);
        });
    }

    protected processCreate(response: Response): SurveyDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SurveyDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SurveyDto.fromJS(resultData200) : new SurveyDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    update(input?: SurveyDto): Observable<SurveyDto> {
        let url_ = this.baseUrl + "/api/services/app/Survey/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdate(response));
                } catch (e) {
                    return <Observable<SurveyDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<SurveyDto>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): SurveyDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SurveyDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SurveyDto.fromJS(resultData200) : new SurveyDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    delete(id?: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Survey/Delete?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDelete(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class TenantServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    create(input?: CreateTenantDto): Observable<TenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreate(response));
                } catch (e) {
                    return <Observable<TenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantDto>><any>Observable.throw(response);
        });
    }

    protected processCreate(response: Response): TenantDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: TenantDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantDto.fromJS(resultData200) : new TenantDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    delete(id?: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Delete?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDelete(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    get(id?: number): Observable<TenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Get?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<TenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): TenantDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: TenantDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantDto.fromJS(resultData200) : new TenantDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAll(skipCount?: number, maxResultCount?: number): Observable<PagedResultDtoOfTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetAll?";
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfTenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfTenantDto>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): PagedResultDtoOfTenantDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfTenantDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTenantDto.fromJS(resultData200) : new PagedResultDtoOfTenantDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    update(input?: TenantDto): Observable<TenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdate(response));
                } catch (e) {
                    return <Observable<TenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantDto>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): TenantDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: TenantDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantDto.fromJS(resultData200) : new TenantDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class TestDateServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    get(id?: number): Observable<TestDateDto> {
        let url_ = this.baseUrl + "/api/services/app/TestDate/Get?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<TestDateDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TestDateDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): TestDateDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: TestDateDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TestDateDto.fromJS(resultData200) : new TestDateDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAll(filter?: string, maxResultCount?: number, sorting?: string, skipCount?: number): Observable<PagedResultDtoOfTestDateDto> {
        let url_ = this.baseUrl + "/api/services/app/TestDate/GetAll?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfTestDateDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfTestDateDto>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): PagedResultDtoOfTestDateDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfTestDateDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTestDateDto.fromJS(resultData200) : new PagedResultDtoOfTestDateDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    create(input?: TestDateDto): Observable<TestDateDto> {
        let url_ = this.baseUrl + "/api/services/app/TestDate/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreate(response));
                } catch (e) {
                    return <Observable<TestDateDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TestDateDto>><any>Observable.throw(response);
        });
    }

    protected processCreate(response: Response): TestDateDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: TestDateDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TestDateDto.fromJS(resultData200) : new TestDateDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    update(input?: TestDateDto): Observable<TestDateDto> {
        let url_ = this.baseUrl + "/api/services/app/TestDate/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdate(response));
                } catch (e) {
                    return <Observable<TestDateDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TestDateDto>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): TestDateDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: TestDateDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TestDateDto.fromJS(resultData200) : new TestDateDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    delete(id?: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TestDate/Delete?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDelete(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class TokenAuthServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    authenticate(model?: AuthenticateModel): Observable<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processAuthenticate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processAuthenticate(response));
                } catch (e) {
                    return <Observable<AuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuthenticateResultModel>><any>Observable.throw(response);
        });
    }

    protected processAuthenticate(response: Response): AuthenticateResultModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getExternalAuthenticationProviders(): Observable<ExternalLoginProviderInfoModel[]> {
        let url_ = this.baseUrl + "/api/TokenAuth/GetExternalAuthenticationProviders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetExternalAuthenticationProviders(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetExternalAuthenticationProviders(response));
                } catch (e) {
                    return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(response);
        });
    }

    protected processGetExternalAuthenticationProviders(response: Response): ExternalLoginProviderInfoModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ExternalLoginProviderInfoModel[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ExternalLoginProviderInfoModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    externalAuthenticate(model?: ExternalAuthenticateModel): Observable<ExternalAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalAuthenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processExternalAuthenticate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processExternalAuthenticate(response));
                } catch (e) {
                    return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(response);
        });
    }

    protected processExternalAuthenticate(response: Response): ExternalAuthenticateResultModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ExternalAuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ExternalAuthenticateResultModel.fromJS(resultData200) : new ExternalAuthenticateResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    create(input?: CreateUserDto): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreate(response));
                } catch (e) {
                    return <Observable<UserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<UserDto>><any>Observable.throw(response);
        });
    }

    protected processCreate(response: Response): UserDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UserDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserDto.fromJS(resultData200) : new UserDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    update(input?: UserDto): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdate(response));
                } catch (e) {
                    return <Observable<UserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<UserDto>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): UserDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UserDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserDto.fromJS(resultData200) : new UserDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    delete(id?: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/Delete?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDelete(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getRoles(): Observable<ListResultDtoOfRoleDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetRoles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetRoles(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetRoles(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfRoleDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfRoleDto>><any>Observable.throw(response);
        });
    }

    protected processGetRoles(response: Response): ListResultDtoOfRoleDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfRoleDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfRoleDto.fromJS(resultData200) : new ListResultDtoOfRoleDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    get(id?: number): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Get?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<UserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<UserDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): UserDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UserDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserDto.fromJS(resultData200) : new UserDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAll(filter?: string, maxResultCount?: number, sorting?: string, skipCount?: number): Observable<PagedResultDtoOfUserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetAll?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfUserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfUserDto>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): PagedResultDtoOfUserDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfUserDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfUserDto.fromJS(resultData200) : new PagedResultDtoOfUserDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export class IsTenantAvailableInput {
    tenancyName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
        }
    }

    static fromJS(data: any): IsTenantAvailableInput {
        return new IsTenantAvailableInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IsTenantAvailableInput(JSON.parse(json));
    }
}

export class IsTenantAvailableOutput {
    state: IsTenantAvailableOutputState;
    tenantId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.state = data["state"] !== undefined ? data["state"] : undefined;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
        }
    }

    static fromJS(data: any): IsTenantAvailableOutput {
        return new IsTenantAvailableOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["state"] = this.state !== undefined ? this.state : undefined;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IsTenantAvailableOutput(JSON.parse(json));
    }
}

export class RegisterInput {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    password: string;
    captchaResponse: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.surname = data["surname"] !== undefined ? data["surname"] : undefined;
            this.userName = data["userName"] !== undefined ? data["userName"] : undefined;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : undefined;
            this.password = data["password"] !== undefined ? data["password"] : undefined;
            this.captchaResponse = data["captchaResponse"] !== undefined ? data["captchaResponse"] : undefined;
        }
    }

    static fromJS(data: any): RegisterInput {
        return new RegisterInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["surname"] = this.surname !== undefined ? this.surname : undefined;
        data["userName"] = this.userName !== undefined ? this.userName : undefined;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : undefined;
        data["password"] = this.password !== undefined ? this.password : undefined;
        data["captchaResponse"] = this.captchaResponse !== undefined ? this.captchaResponse : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterInput(JSON.parse(json));
    }
}

export class RegisterOutput {
    canLogin: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.canLogin = data["canLogin"] !== undefined ? data["canLogin"] : undefined;
        }
    }

    static fromJS(data: any): RegisterOutput {
        return new RegisterOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["canLogin"] = this.canLogin !== undefined ? this.canLogin : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterOutput(JSON.parse(json));
    }
}

export class ChangeUiThemeInput {
    theme: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.theme = data["theme"] !== undefined ? data["theme"] : undefined;
        }
    }

    static fromJS(data: any): ChangeUiThemeInput {
        return new ChangeUiThemeInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["theme"] = this.theme !== undefined ? this.theme : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ChangeUiThemeInput(JSON.parse(json));
    }
}

export class DomainDto {
    name: string;
    code: string;
    parentDomainId: string;
    parentDomainName: string;
    domainGroupId: string;
    domainGroupName: string;
    ur: number;
    id: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.code = data["code"] !== undefined ? data["code"] : undefined;
            this.parentDomainId = data["parentDomainId"] !== undefined ? data["parentDomainId"] : undefined;
            this.parentDomainName = data["parentDomainName"] !== undefined ? data["parentDomainName"] : undefined;
            this.domainGroupId = data["domainGroupId"] !== undefined ? data["domainGroupId"] : undefined;
            this.domainGroupName = data["domainGroupName"] !== undefined ? data["domainGroupName"] : undefined;
            this.ur = data["ur"] !== undefined ? data["ur"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): DomainDto {
        return new DomainDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["code"] = this.code !== undefined ? this.code : undefined;
        data["parentDomainId"] = this.parentDomainId !== undefined ? this.parentDomainId : undefined;
        data["parentDomainName"] = this.parentDomainName !== undefined ? this.parentDomainName : undefined;
        data["domainGroupId"] = this.domainGroupId !== undefined ? this.domainGroupId : undefined;
        data["domainGroupName"] = this.domainGroupName !== undefined ? this.domainGroupName : undefined;
        data["ur"] = this.ur !== undefined ? this.ur : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new DomainDto(JSON.parse(json));
    }
}

export class PagedResultDtoOfDomainDto {
    totalCount: number;
    items: DomainDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(DomainDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfDomainDto {
        return new PagedResultDtoOfDomainDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfDomainDto(JSON.parse(json));
    }
}

export class DomainGroupDto {
    name: string;
    type: number;
    isActive: boolean;
    createdDate: moment.Moment;
    lastUpdateTime: moment.Moment;
    id: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.type = data["type"] !== undefined ? data["type"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.createdDate = data["createdDate"] ? moment(data["createdDate"].toString()) : undefined;
            this.lastUpdateTime = data["lastUpdateTime"] ? moment(data["lastUpdateTime"].toString()) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): DomainGroupDto {
        return new DomainGroupDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["type"] = this.type !== undefined ? this.type : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined;
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new DomainGroupDto(JSON.parse(json));
    }
}

export class PagedResultDtoOfDomainGroupDto {
    totalCount: number;
    items: DomainGroupDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(DomainGroupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfDomainGroupDto {
        return new PagedResultDtoOfDomainGroupDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfDomainGroupDto(JSON.parse(json));
    }
}

export class QuestionDto {
    title: string;
    isActive: boolean;
    order: number;
    questionType: number;
    domainGroupId: string;
    domainGroupName: string;
    domainGroupLevelsNumber: number;
    questionGroupId: string;
    questionGroupName: string;
    code: string;
    isRequired: boolean;
    isHidden: boolean;
    description: string;
    questionNumber: string;
    help: string;
    defaultAnswerValue: string;
    isUsedInCallBack: boolean;
    questionAnswers: QuestionAnswerDto[];
    id: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.title = data["title"] !== undefined ? data["title"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.order = data["order"] !== undefined ? data["order"] : undefined;
            this.questionType = data["questionType"] !== undefined ? data["questionType"] : undefined;
            this.domainGroupId = data["domainGroupId"] !== undefined ? data["domainGroupId"] : undefined;
            this.domainGroupName = data["domainGroupName"] !== undefined ? data["domainGroupName"] : undefined;
            this.domainGroupLevelsNumber = data["domainGroupLevelsNumber"] !== undefined ? data["domainGroupLevelsNumber"] : undefined;
            this.questionGroupId = data["questionGroupId"] !== undefined ? data["questionGroupId"] : undefined;
            this.questionGroupName = data["questionGroupName"] !== undefined ? data["questionGroupName"] : undefined;
            this.code = data["code"] !== undefined ? data["code"] : undefined;
            this.isRequired = data["isRequired"] !== undefined ? data["isRequired"] : undefined;
            this.isHidden = data["isHidden"] !== undefined ? data["isHidden"] : undefined;
            this.description = data["description"] !== undefined ? data["description"] : undefined;
            this.questionNumber = data["questionNumber"] !== undefined ? data["questionNumber"] : undefined;
            this.help = data["help"] !== undefined ? data["help"] : undefined;
            this.defaultAnswerValue = data["defaultAnswerValue"] !== undefined ? data["defaultAnswerValue"] : undefined;
            this.isUsedInCallBack = data["isUsedInCallBack"] !== undefined ? data["isUsedInCallBack"] : undefined;
            if (data["questionAnswers"] && data["questionAnswers"].constructor === Array) {
                this.questionAnswers = [];
                for (let item of data["questionAnswers"])
                    this.questionAnswers.push(QuestionAnswerDto.fromJS(item));
            }
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): QuestionDto {
        return new QuestionDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["title"] = this.title !== undefined ? this.title : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["order"] = this.order !== undefined ? this.order : undefined;
        data["questionType"] = this.questionType !== undefined ? this.questionType : undefined;
        data["domainGroupId"] = this.domainGroupId !== undefined ? this.domainGroupId : undefined;
        data["domainGroupName"] = this.domainGroupName !== undefined ? this.domainGroupName : undefined;
        data["domainGroupLevelsNumber"] = this.domainGroupLevelsNumber !== undefined ? this.domainGroupLevelsNumber : undefined;
        data["questionGroupId"] = this.questionGroupId !== undefined ? this.questionGroupId : undefined;
        data["questionGroupName"] = this.questionGroupName !== undefined ? this.questionGroupName : undefined;
        data["code"] = this.code !== undefined ? this.code : undefined;
        data["isRequired"] = this.isRequired !== undefined ? this.isRequired : undefined;
        data["isHidden"] = this.isHidden !== undefined ? this.isHidden : undefined;
        data["description"] = this.description !== undefined ? this.description : undefined;
        data["questionNumber"] = this.questionNumber !== undefined ? this.questionNumber : undefined;
        data["help"] = this.help !== undefined ? this.help : undefined;
        data["defaultAnswerValue"] = this.defaultAnswerValue !== undefined ? this.defaultAnswerValue : undefined;
        data["isUsedInCallBack"] = this.isUsedInCallBack !== undefined ? this.isUsedInCallBack : undefined;
        if (this.questionAnswers && this.questionAnswers.constructor === Array) {
            data["questionAnswers"] = [];
            for (let item of this.questionAnswers)
                data["questionAnswers"].push(item.toJS());
        }
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new QuestionDto(JSON.parse(json));
    }
}

export class QuestionAnswerDto {
    title: string;
    isActive: boolean;
    order: number;
    code: string;
    allowText: boolean;
    id: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.title = data["title"] !== undefined ? data["title"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.order = data["order"] !== undefined ? data["order"] : undefined;
            this.code = data["code"] !== undefined ? data["code"] : undefined;
            this.allowText = data["allowText"] !== undefined ? data["allowText"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): QuestionAnswerDto {
        return new QuestionAnswerDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["title"] = this.title !== undefined ? this.title : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["order"] = this.order !== undefined ? this.order : undefined;
        data["code"] = this.code !== undefined ? this.code : undefined;
        data["allowText"] = this.allowText !== undefined ? this.allowText : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new QuestionAnswerDto(JSON.parse(json));
    }
}

export class PagedResultDtoOfQuestionDto {
    totalCount: number;
    items: QuestionDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(QuestionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfQuestionDto {
        return new PagedResultDtoOfQuestionDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfQuestionDto(JSON.parse(json));
    }
}

export class QuestionGroupDto {
    name: string;
    isActive: boolean;
    order: number;
    surveyId: string;
    surveyName: string;
    code: string;
    id: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.order = data["order"] !== undefined ? data["order"] : undefined;
            this.surveyId = data["surveyId"] !== undefined ? data["surveyId"] : undefined;
            this.surveyName = data["surveyName"] !== undefined ? data["surveyName"] : undefined;
            this.code = data["code"] !== undefined ? data["code"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): QuestionGroupDto {
        return new QuestionGroupDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["order"] = this.order !== undefined ? this.order : undefined;
        data["surveyId"] = this.surveyId !== undefined ? this.surveyId : undefined;
        data["surveyName"] = this.surveyName !== undefined ? this.surveyName : undefined;
        data["code"] = this.code !== undefined ? this.code : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new QuestionGroupDto(JSON.parse(json));
    }
}

export class PagedResultDtoOfQuestionGroupDto {
    totalCount: number;
    items: QuestionGroupDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(QuestionGroupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfQuestionGroupDto {
        return new PagedResultDtoOfQuestionGroupDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfQuestionGroupDto(JSON.parse(json));
    }
}

export class CreateRoleDto {
    name: string;
    displayName: string;
    normalizedName: string;
    description: string;
    isStatic: boolean;
    permissions: string[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : undefined;
            this.normalizedName = data["normalizedName"] !== undefined ? data["normalizedName"] : undefined;
            this.description = data["description"] !== undefined ? data["description"] : undefined;
            this.isStatic = data["isStatic"] !== undefined ? data["isStatic"] : undefined;
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(item);
            }
        }
    }

    static fromJS(data: any): CreateRoleDto {
        return new CreateRoleDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["displayName"] = this.displayName !== undefined ? this.displayName : undefined;
        data["normalizedName"] = this.normalizedName !== undefined ? this.normalizedName : undefined;
        data["description"] = this.description !== undefined ? this.description : undefined;
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : undefined;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateRoleDto(JSON.parse(json));
    }
}

export class RoleDto {
    name: string;
    displayName: string;
    normalizedName: string;
    description: string;
    isStatic: boolean;
    permissions: string[];
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : undefined;
            this.normalizedName = data["normalizedName"] !== undefined ? data["normalizedName"] : undefined;
            this.description = data["description"] !== undefined ? data["description"] : undefined;
            this.isStatic = data["isStatic"] !== undefined ? data["isStatic"] : undefined;
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(item);
            }
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): RoleDto {
        return new RoleDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["displayName"] = this.displayName !== undefined ? this.displayName : undefined;
        data["normalizedName"] = this.normalizedName !== undefined ? this.normalizedName : undefined;
        data["description"] = this.description !== undefined ? this.description : undefined;
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : undefined;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RoleDto(JSON.parse(json));
    }
}

export class ListResultDtoOfPermissionDto {
    items: PermissionDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(PermissionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfPermissionDto {
        return new ListResultDtoOfPermissionDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfPermissionDto(JSON.parse(json));
    }
}

export class PermissionDto {
    name: string;
    displayName: string;
    description: string;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : undefined;
            this.description = data["description"] !== undefined ? data["description"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): PermissionDto {
        return new PermissionDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["displayName"] = this.displayName !== undefined ? this.displayName : undefined;
        data["description"] = this.description !== undefined ? this.description : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PermissionDto(JSON.parse(json));
    }
}

export class PagedResultDtoOfRoleDto {
    totalCount: number;
    items: RoleDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(RoleDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRoleDto {
        return new PagedResultDtoOfRoleDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfRoleDto(JSON.parse(json));
    }
}

export class GetCurrentLoginInformationsOutput {
    application: ApplicationInfoDto;
    user: UserLoginInfoDto;
    tenant: TenantLoginInfoDto;

    constructor(data?: any) {
        if (data !== undefined) {
            this.application = data["application"] ? ApplicationInfoDto.fromJS(data["application"]) : undefined;
            this.user = data["user"] ? UserLoginInfoDto.fromJS(data["user"]) : undefined;
            this.tenant = data["tenant"] ? TenantLoginInfoDto.fromJS(data["tenant"]) : undefined;
        }
    }

    static fromJS(data: any): GetCurrentLoginInformationsOutput {
        return new GetCurrentLoginInformationsOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["application"] = this.application ? this.application.toJS() : undefined;
        data["user"] = this.user ? this.user.toJS() : undefined;
        data["tenant"] = this.tenant ? this.tenant.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetCurrentLoginInformationsOutput(JSON.parse(json));
    }
}

export class ApplicationInfoDto {
    version: string;
    releaseDate: moment.Moment;
    features: { [key: string] : boolean; };

    constructor(data?: any) {
        if (data !== undefined) {
            this.version = data["version"] !== undefined ? data["version"] : undefined;
            this.releaseDate = data["releaseDate"] ? moment(data["releaseDate"].toString()) : undefined;
            if (data["features"]) {
                this.features = {};
                for (let key in data["features"]) {
                    if (data["features"].hasOwnProperty(key))
                        this.features[key] = data["features"][key] !== undefined ? data["features"][key] : undefined;
                }
            }
        }
    }

    static fromJS(data: any): ApplicationInfoDto {
        return new ApplicationInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["version"] = this.version !== undefined ? this.version : undefined;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : undefined;
        if (this.features) {
            data["features"] = {};
            for (let key in this.features) {
                if (this.features.hasOwnProperty(key))
                    data["features"][key] = this.features[key] !== undefined ? this.features[key] : undefined;
            }
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ApplicationInfoDto(JSON.parse(json));
    }
}

export class UserLoginInfoDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.surname = data["surname"] !== undefined ? data["surname"] : undefined;
            this.userName = data["userName"] !== undefined ? data["userName"] : undefined;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): UserLoginInfoDto {
        return new UserLoginInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["surname"] = this.surname !== undefined ? this.surname : undefined;
        data["userName"] = this.userName !== undefined ? this.userName : undefined;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserLoginInfoDto(JSON.parse(json));
    }
}

export class TenantLoginInfoDto {
    tenancyName: string;
    name: string;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): TenantLoginInfoDto {
        return new TenantLoginInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantLoginInfoDto(JSON.parse(json));
    }
}

export class PagedResultDtoOfStudentDto {
    totalCount: number;
    items: StudentDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(StudentDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfStudentDto {
        return new PagedResultDtoOfStudentDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfStudentDto(JSON.parse(json));
    }
}

export class StudentDto {
    name: string;
    bio: string;
    age: number;
    isActive: boolean;
    roleId: number;
    id: number;
    parentId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.bio = data["bio"] !== undefined ? data["bio"] : undefined;
            this.age = data["age"] !== undefined ? data["age"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.roleId = data["roleId"] !== undefined ? data["roleId"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
            this.parentId = data["parentId"] !== undefined ? data["parentId"] : undefined;
        }
    }

    static fromJS(data: any): StudentDto {
        return new StudentDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["bio"] = this.bio !== undefined ? this.bio : undefined;
        data["age"] = this.age !== undefined ? this.age : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["roleId"] = this.roleId !== undefined ? this.roleId : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        data["parentId"] = this.parentId !== undefined ? this.parentId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new StudentDto(JSON.parse(json));
    }
}

export class SurveyDto {
    name: string;
    isActive: boolean;
    parentSurveyId: string;
    parentSurveyName: string;
    parentSurveyRelation: number;
    isEnabled: boolean;
    code: string;
    icon: string;
    allowAddResponse: boolean;
    typeText: string;
    serialDigitsCount: number;
    lastUpdateTime: moment.Moment;
    mappedToSurveyId: string;
    minMinutes: number;
    dailyTarget: number;
    id: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.parentSurveyId = data["parentSurveyId"] !== undefined ? data["parentSurveyId"] : undefined;
            this.parentSurveyName = data["parentSurveyName"] !== undefined ? data["parentSurveyName"] : undefined;
            this.parentSurveyRelation = data["parentSurveyRelation"] !== undefined ? data["parentSurveyRelation"] : undefined;
            this.isEnabled = data["isEnabled"] !== undefined ? data["isEnabled"] : undefined;
            this.code = data["code"] !== undefined ? data["code"] : undefined;
            this.icon = data["icon"] !== undefined ? data["icon"] : undefined;
            this.allowAddResponse = data["allowAddResponse"] !== undefined ? data["allowAddResponse"] : undefined;
            this.typeText = data["typeText"] !== undefined ? data["typeText"] : undefined;
            this.serialDigitsCount = data["serialDigitsCount"] !== undefined ? data["serialDigitsCount"] : undefined;
            this.lastUpdateTime = data["lastUpdateTime"] ? moment(data["lastUpdateTime"].toString()) : undefined;
            this.mappedToSurveyId = data["mappedToSurveyId"] !== undefined ? data["mappedToSurveyId"] : undefined;
            this.minMinutes = data["minMinutes"] !== undefined ? data["minMinutes"] : undefined;
            this.dailyTarget = data["dailyTarget"] !== undefined ? data["dailyTarget"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): SurveyDto {
        return new SurveyDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["parentSurveyId"] = this.parentSurveyId !== undefined ? this.parentSurveyId : undefined;
        data["parentSurveyName"] = this.parentSurveyName !== undefined ? this.parentSurveyName : undefined;
        data["parentSurveyRelation"] = this.parentSurveyRelation !== undefined ? this.parentSurveyRelation : undefined;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : undefined;
        data["code"] = this.code !== undefined ? this.code : undefined;
        data["icon"] = this.icon !== undefined ? this.icon : undefined;
        data["allowAddResponse"] = this.allowAddResponse !== undefined ? this.allowAddResponse : undefined;
        data["typeText"] = this.typeText !== undefined ? this.typeText : undefined;
        data["serialDigitsCount"] = this.serialDigitsCount !== undefined ? this.serialDigitsCount : undefined;
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : undefined;
        data["mappedToSurveyId"] = this.mappedToSurveyId !== undefined ? this.mappedToSurveyId : undefined;
        data["minMinutes"] = this.minMinutes !== undefined ? this.minMinutes : undefined;
        data["dailyTarget"] = this.dailyTarget !== undefined ? this.dailyTarget : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SurveyDto(JSON.parse(json));
    }
}

export class PagedResultDtoOfSurveyDto {
    totalCount: number;
    items: SurveyDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(SurveyDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSurveyDto {
        return new PagedResultDtoOfSurveyDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfSurveyDto(JSON.parse(json));
    }
}

export class CreateTenantDto {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    connectionString: string;
    isActive: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.adminEmailAddress = data["adminEmailAddress"] !== undefined ? data["adminEmailAddress"] : undefined;
            this.connectionString = data["connectionString"] !== undefined ? data["connectionString"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
        }
    }

    static fromJS(data: any): CreateTenantDto {
        return new CreateTenantDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["adminEmailAddress"] = this.adminEmailAddress !== undefined ? this.adminEmailAddress : undefined;
        data["connectionString"] = this.connectionString !== undefined ? this.connectionString : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateTenantDto(JSON.parse(json));
    }
}

export class TenantDto {
    tenancyName: string;
    name: string;
    isActive: boolean;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): TenantDto {
        return new TenantDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantDto(JSON.parse(json));
    }
}

export class PagedResultDtoOfTenantDto {
    totalCount: number;
    items: TenantDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TenantDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTenantDto {
        return new PagedResultDtoOfTenantDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfTenantDto(JSON.parse(json));
    }
}

export class TestDateDto {
    createdDate: moment.Moment;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.createdDate = data["createdDate"] ? moment(data["createdDate"].toString()) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): TestDateDto {
        return new TestDateDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TestDateDto(JSON.parse(json));
    }
}

export class PagedResultDtoOfTestDateDto {
    totalCount: number;
    items: TestDateDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TestDateDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTestDateDto {
        return new PagedResultDtoOfTestDateDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfTestDateDto(JSON.parse(json));
    }
}

export class AuthenticateModel {
    userNameOrEmailAddress: string;
    password: string;
    rememberClient: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userNameOrEmailAddress = data["userNameOrEmailAddress"] !== undefined ? data["userNameOrEmailAddress"] : undefined;
            this.password = data["password"] !== undefined ? data["password"] : undefined;
            this.rememberClient = data["rememberClient"] !== undefined ? data["rememberClient"] : undefined;
        }
    }

    static fromJS(data: any): AuthenticateModel {
        return new AuthenticateModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress !== undefined ? this.userNameOrEmailAddress : undefined;
        data["password"] = this.password !== undefined ? this.password : undefined;
        data["rememberClient"] = this.rememberClient !== undefined ? this.rememberClient : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuthenticateModel(JSON.parse(json));
    }
}

export class AuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
    userId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : undefined;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : undefined;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : undefined;
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        return new AuthenticateResultModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : undefined;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : undefined;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : undefined;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuthenticateResultModel(JSON.parse(json));
    }
}

export class ExternalLoginProviderInfoModel {
    name: string;
    clientId: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.clientId = data["clientId"] !== undefined ? data["clientId"] : undefined;
        }
    }

    static fromJS(data: any): ExternalLoginProviderInfoModel {
        return new ExternalLoginProviderInfoModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["clientId"] = this.clientId !== undefined ? this.clientId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalLoginProviderInfoModel(JSON.parse(json));
    }
}

export class ExternalAuthenticateModel {
    authProvider: string;
    providerKey: string;
    providerAccessCode: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.authProvider = data["authProvider"] !== undefined ? data["authProvider"] : undefined;
            this.providerKey = data["providerKey"] !== undefined ? data["providerKey"] : undefined;
            this.providerAccessCode = data["providerAccessCode"] !== undefined ? data["providerAccessCode"] : undefined;
        }
    }

    static fromJS(data: any): ExternalAuthenticateModel {
        return new ExternalAuthenticateModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["authProvider"] = this.authProvider !== undefined ? this.authProvider : undefined;
        data["providerKey"] = this.providerKey !== undefined ? this.providerKey : undefined;
        data["providerAccessCode"] = this.providerAccessCode !== undefined ? this.providerAccessCode : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalAuthenticateModel(JSON.parse(json));
    }
}

export class ExternalAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
    waitingForActivation: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : undefined;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : undefined;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : undefined;
            this.waitingForActivation = data["waitingForActivation"] !== undefined ? data["waitingForActivation"] : undefined;
        }
    }

    static fromJS(data: any): ExternalAuthenticateResultModel {
        return new ExternalAuthenticateResultModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : undefined;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : undefined;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : undefined;
        data["waitingForActivation"] = this.waitingForActivation !== undefined ? this.waitingForActivation : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalAuthenticateResultModel(JSON.parse(json));
    }
}

export class CreateUserDto {
    userName: string;
    name: string;
    surname: string;
    emailAddress: string;
    isActive: boolean;
    roles: string[];
    password: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userName = data["userName"] !== undefined ? data["userName"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.surname = data["surname"] !== undefined ? data["surname"] : undefined;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(item);
            }
            this.password = data["password"] !== undefined ? data["password"] : undefined;
        }
    }

    static fromJS(data: any): CreateUserDto {
        return new CreateUserDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userName"] = this.userName !== undefined ? this.userName : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["surname"] = this.surname !== undefined ? this.surname : undefined;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["password"] = this.password !== undefined ? this.password : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateUserDto(JSON.parse(json));
    }
}

export class UserDto {
    userName: string;
    name: string;
    surname: string;
    emailAddress: string;
    isActive: boolean;
    fullName: string;
    lastLoginTime: moment.Moment;
    creationTime: moment.Moment;
    roles: string[];
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userName = data["userName"] !== undefined ? data["userName"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.surname = data["surname"] !== undefined ? data["surname"] : undefined;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.fullName = data["fullName"] !== undefined ? data["fullName"] : undefined;
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(item);
            }
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): UserDto {
        return new UserDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userName"] = this.userName !== undefined ? this.userName : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["surname"] = this.surname !== undefined ? this.surname : undefined;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["fullName"] = this.fullName !== undefined ? this.fullName : undefined;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserDto(JSON.parse(json));
    }
}

export class ListResultDtoOfRoleDto {
    items: RoleDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(RoleDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfRoleDto {
        return new ListResultDtoOfRoleDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfRoleDto(JSON.parse(json));
    }
}

export class PagedResultDtoOfUserDto {
    totalCount: number;
    items: UserDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfUserDto {
        return new PagedResultDtoOfUserDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfUserDto(JSON.parse(json));
    }
}

export enum IsTenantAvailableOutputState {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}